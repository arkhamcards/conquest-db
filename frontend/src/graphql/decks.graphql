mutation publishDeck(
  $deckId: Int!
) {
  deck: conquest_publish_deck(args: {
    deck_id: $deckId
  }) {
    id
  }
}

query searchDecks(
  $userId: String,
  $background: _text,
  $specialty: _text,
  $role: _text,
  $limit: Int,
  $offset: Int
) {
  decks: conquest_deck {
    ...SearchDeck
  }
}

query getMyDecks(
  $userId: String!,
  $limit: Int!,
  $offset: Int!
) {
  decks: conquest_deck(
    where: {
      user_id: { _eq: $userId }
      _or: [
        {
          published: { _is_null: true }
        },
        {
          published: { _eq: false }
        }
      ]
    }
    order_by: { updated_at: desc, id: asc }
    limit: $limit
    offset: $offset
  ) {
    ...Deck
  }
}

query getMyDecksTotal(
  $userId: String!
) {
  total: conquest_deck_aggregate(
    where: {
      user_id: { _eq: $userId }
      _or: [
        {
          published: { _is_null: true }
        },
        {
          published: { _eq: false }
        }
      ]
    }
  ) {
    aggregate {
      count
    }
  }
}

query getDeck(
  $deckId: Int!
) {
  deck: conquest_deck_by_pk(id: $deckId) {
    ...DeckDetail

  }
}

query getDeckComments(
  $deckId: Int!,
  $limit: Int!
  $offset: Int!
) {
  conquest_comment(
    where: {
      deck_id: { _eq: $deckId }
      comment_id: { _is_null: true }
    }
    order_by: {
      created_at: desc
    }
    offset: $offset
    limit: $limit
  ) {
    ...DeckComment
  }
}

query getResponseComments(
  $commentId: uuid!,
  $limit: Int!
  $offset: Int!
) {
  conquest_comment(
    where: {
      comment_id: { _eq: $commentId }
    }
    order_by: {
      created_at: desc
    }
    offset: $offset
    limit: $limit
  ) {
    ...DeckComment
  }
}

mutation postComment(
  $deckId: Int!,
  $text: String!,
  $commentId: uuid
) {
  insert_conquest_comment_one(
    object: {
      deck_id: $deckId
      text: $text
      comment_id: $commentId
    }
  ) {
    ...BasicDeckComment
    comment_id
    deck_id
  }
}

mutation editComment(
  $id: uuid!,
  $text: String!
) {
  update_conquest_comment_by_pk(
    pk_columns: {
      id: $id
    }
    _set: {
      text: $text
    }
  ) {
    id
    text
    updated_at
  }
}

mutation createDeck(
  $name: String!,
  $meta: jsonb!,
  $slots: jsonb!,
  $description: String
) {
  deck: insert_conquest_deck_one(
    object: {
      name: $name
      meta: $meta
      slots: $slots
      description: $description
    }
  ) {
    ...Deck
  }
}

mutation cloneDeck(
  $originalDeckId: Int!
  $newDeckId: Int!
) {
  deck: insert_conquest_deck_copy_one(
    object: {
      deck_id: $originalDeckId
      copy_deck_id: $newDeckId
    }
  ) {
    user_id
    deck_id
    copy_deck_id
  }
}

mutation deleteDeck(
  $id: Int!
) {
  delete_conquest_deck_by_pk(id: $id) {
    id
  }
}

mutation saveDeck(
  $id: Int!,
  $name: String!,
  $meta: jsonb!,
  $slots: jsonb!,
  $sideSlots: jsonb!
) {
  update_conquest_deck_by_pk(
    pk_columns: { id: $id }
    _set: {
      name: $name,
      meta: $meta,
      slots: $slots
      side_slots: $sideSlots,
    }
  ) {
    ...Deck
  }
}

mutation saveDeckDescription(
  $id: Int!,
  $description: String!
) {
  update_conquest_deck_by_pk(
    pk_columns: { id: $id }
    _set: {
      description: $description
    }
  ) {
    id
    description
  }
}

mutation likeDeck($deckId: Int!) {
  insert_conquest_deck_like_one(
    object: {
      deck_id: $deckId
      liked: true
    }
    on_conflict: {
      constraint: deck_like_pkey
      update_columns: [liked]
    }
  ) {
    user_id
    deck_id
    liked
  }
}

mutation unlikeDeck(
  $userId: String!,
  $deckId: Int!
) {
  update_conquest_deck_like_by_pk(
    pk_columns: { deck_id: $deckId, user_id: $userId }
    _set: {
      liked: false
    }
  ) {
    user_id
    deck_id
    liked
  }
}
